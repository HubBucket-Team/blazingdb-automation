pipeline {
  agent {
      label 'slave-gpu'
  }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    string(name: 'PROJECT_NAME', defaultValue: 'blazingdb-system-automation', description: '')
    string(name: 'CLUSTER_NAME', defaultValue: 'blazingsql-test', description: '')
    string(name: 'ZONE', defaultValue: 'us-west1-a', description: '')
    string(name: 'NODES_NUMBER', defaultValue: '1', description: '')
    string(name: 'NUMBER_GPUS_PER_NODE', defaultValue: '2', description: '')
  }

  environment {
    SLACK_MESSAGE=" - Job '${env.JOB_NAME}' - Build #${env.BUILD_NUMBER}: ${env.BUILD_URL}"
  }

  stages {
    stage("Repository") {
      steps {
        checkout scm
      }
    }

    stage("Create cluster on GCP") { 
      steps {
        script {         
            sh "./install_test.sh ${params.PROJECT_NAME} ${params.CLUSTER_NAME} ${params.ZONE} ${params.NODES_NUMBER} ${params.NUMBER_GPUS_PER_NODE}"
          }
        }
      }
    }

  }

  // Method to post jenkinsfile
  post {
   // always {
   //    notifySlack "Started"
   //  }
    success {
         notifySlack "Success"
    }
    failure {
          notifySlack "Failure"
    }
    unstable {
          notifySlack "Warning"
    }
  }


// Method to send notifications for slack
def notifySlack(String buildStatus = 'Started') {
    buildStatus = buildStatus ?: 'Success'

    def color

    if (buildStatus == 'Started') {
        color = '#6f7275'
    } else if (buildStatus == 'Success') {
        color = '#037c0e'
    } else if (buildStatus == 'Warning') {
        color = '#dfdd30'
    } else {
        color = '#8e0406'
    }


 slackSend channel: "${params.SLACK_CHANNEL}", color: color, failOnError: true, message: "${buildStatus}" + "$SLACK_MESSAGE"
}
