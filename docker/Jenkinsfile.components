pipeline {
  agent {
      label 'slave-gpu'
  }
  
  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    booleanParam(name: 'DOCKERHUB_PUBLISH', defaultValue: false, description: 'Publish to Docker Hub')
    string(name: 'CREDENTIALS', defaultValue: 'dockerhub-editaxz', description: 'Your credentials on blazingdb docker hub organization')
    string(name: 'SLACK_CHANNEL', defaultValue: 'jenkins-blazingsql', description: '')
  }
  
  environment {
    SLACK_MESSAGE=" - Job '${env.JOB_NAME}' - Build #${env.BUILD_NUMBER}: ${env.BUILD_URL}"
  }

  stages {

    stage("Repository") {
      steps {
        checkout scm
      }
    }
    
    stage("Build") {
      steps {
        dir("docker/blazingsql/") {
          sh "cp $HOME/blazingsql/output3/blazingsql-files.tar.gz ./"
          sh "./docker_build_components.sh"
          sh "rm -rf ./blazingsql-files.tar.gz"
        }
      }
    }

    stage("Publish to Docker Hub") {
      when {
        expression {
          return params.DOCKERHUB_PUBLISH ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
        script {
          docker.withRegistry('https://registry.hub.docker.com', "${params.CREDENTIALS}") {
            calcite = docker.image("blazingdb/blazingsql:calcite")
            calcite.push()

            orchestrator = docker.image("blazingdb/blazingsql:orchestator")
            orchestator.push()

            ral = docker.image("blazingdb/blazingsql:ral")
            ral.push()

            pyblazing = docker.image("blazingdb/blazingsql:pyblazing")
            pyblazing.push()
          }
        }
      }     
    }
  }

// Method to post jenkinsfile
  post {
   // always {
   //    notifySlack "Started"
   //  }
    success {
         notifySlack "Success"
    }
    failure {
          notifySlack "Failure"
    }
    unstable {
          notifySlack "Warning"
    }
  }

}

// Method to send notifications for slack
def notifySlack(String buildStatus = 'Started') {
    buildStatus = buildStatus ?: 'Success'

    def color

    if (buildStatus == 'Started') {
        color = '#6f7275'
    } else if (buildStatus == 'Success') {
        color = '#037c0e'
    } else if (buildStatus == 'Warning') {
        color = '#dfdd30'
    } else {
        color = '#8e0406'
    }


 slackSend channel: "${params.SLACK_CHANNEL}", color: color, failOnError: true, message: "${buildStatus}" + "$SLACK_MESSAGE"
}
