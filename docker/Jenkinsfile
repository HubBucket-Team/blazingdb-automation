pipeline {
  agent {
      label 'slave-gpu'
  }
  
  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    booleanParam(name: 'PUBLISH', defaultValue: false, description: 'Publish to Docker Hub')
    booleanParam(name: 'LATEST', defaultValue: false, description: 'Publish image as latest')
    string(name: 'TAG_DEPLOY', defaultValue: 'latest', description: 'NOTE: Write your deploy tag')
    booleanParam(name: 'ANACONDA_PUBLISH_CLOUD', defaultValue: false, description: 'Publish to Conda Cloud')
    string(name: 'ANACONDA_VERSION', defaultValue: '1.0', description: 'Blazingsql version')   
    string(name: 'ANACONDA_PYTHON_VERSION', defaultValue: 'py35', description: 'Python version')   
    string(name: 'ANACONDA_BUILD_NUMBER', defaultValue: '1', description: 'Build number')   
    string(name: 'ANACONDA_LABEL', defaultValue: 'cuda9.2', description: 'Label to blazinsql package')   
    //string(name: 'SLACK_CHANNEL', defaultValue: '#devops', description: '')
    string(name: 'CUDF_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_PROTOCOL_BRANCH', defaultValue: 'develop', description: '')
    string(name: 'BLAZINGDB_IO_BRANCH', defaultValue: 'develop', description: '')
    string(name: 'BLAZINGDB_RAL_BRANCH', defaultValue: 'develop', description: '')
    string(name: 'BLAZINGDB_ORCHESTRATOR_BRANCH', defaultValue: 'develop', description: '')
    string(name: 'BLAZINGDB_CALCITE_BRANCH', defaultValue: 'develop', description: '')
    string(name: 'PYBLAZING_BRANCH', defaultValue: 'develop', description: '')
  }
  
  environment {
    IMAGE = "blazingdb/blazingsql:${params.TAG_DEPLOY}"
  }

  stages {

    stage("Repository") {
      steps {
        checkout scm
      }
    }
    
    stage("Build") {
      steps {
        dir("docker/") {
          sh "./build-deploy.sh ${params.TAG_DEPLOY} ${params.CUDF_BRANCH} ${params.BLAZINGDB_PROTOCOL_BRANCH} ${params.BLAZINGDB_IO_BRANCH} ${params.BLAZINGDB_RAL_BRANCH} ${params.BLAZINGDB_ORCHESTRATOR_BRANCH} ${params.BLAZINGDB_CALCITE_BRANCH} ${params.PYBLAZING_BRANCH}"
        }
      }
    }

    stage("Test") {
      steps {
        dir("docker/") {
          sh "./test-image.sh ${env.IMAGE}"
        }
      }
    }

    stage("Run") {
      steps {
        dir("docker/") {
          sh "./run-deploy.sh ${params.TAG_DEPLOY}"
        }
      }
    }
    
    stage("Publish") {
      when {
        expression {
          return params.PUBLISH ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
        build job: "02.PUBLISH_BLAZINGSQL_DOCKERHUB", parameters: [
          [$class: 'StringParameterValue', name: 'IMAGE', value: "${env.IMAGE}"],
          [$class: 'StringParameterValue', name: 'LATEST', value: "${params.LATEST}"],
          //[$class: 'StringParameterValue', name: 'SLACK_CHANNEL', value: "#devops"]
        ]
      }     
    }

    stage("Publish Anaconda Cloud") {
      when {
        expression {
          return params.ANACONDA_PUBLISH_CLOUD ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }      
      steps {
        build job: "03.PUBLISH_BLAZINGSQL_ANACONDACLOUD", parameters: [
          [$class: 'StringParameterValue', name: 'ANACONDA_VERSION', value: "${params.ANACONDA_VERSION}"],
          [$class: 'StringParameterValue', name: 'ANACONDA_PYTHON_VERSION', value: "${params.ANACONDA_PYTHON_VERSION}"],
          [$class: 'StringParameterValue', name: 'ANACONDA_BUILD_NUMBER', value: "${params.ANACONDA_BUILD_NUMBER}"],
          [$class: 'StringParameterValue', name: 'ANACONDA_LABEL', value: "${params.ANACONDA_LABEL}"],
        ]
      }
    }
  }
}
