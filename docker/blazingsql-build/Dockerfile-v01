ARG CUDA_VERSION=9.2
ARG LINUX_VERSION=ubuntu16.04

FROM nvidia/cuda:${CUDA_VERSION}-devel-${LINUX_VERSION}

MAINTAINER BlazingDB, <edith@blazingdb.com>


# Install old libgdf dependencies
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends g++-5  && \
    apt-get install build-essential libssl-dev libffi-dev python-dev -y  && \
    apt-get install libboost-all-dev -y && \
    apt-get install -y openjdk-8-jdk && \
    apt-get -yqq install ssh && \
    apt-get install -y maven && \
    apt-get install -y wget  &&\
    apt-get install python3-setuptools &&\
    apt-get install curl -y &&\
    apt-get install git -y &&\
    apt-get -yqq install ssh &&\
    apt-get clean


RUN wget -O- https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.tar.gz | tar zxf - -C /opt 
ENV PATH $PATH:/opt/cmake-3.11.4-Linux-x86_64/bin

# Set SSH KEYS
####################################################
ARG SSH_KEY

RUN mkdir -p /root/.ssh/ && \
    echo "$SSH_KEY" > /root/.ssh/id_rsa && \
    chmod -R 600 /root/.ssh/ && \
    ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
#########################################################

WORKDIR /opt
RUN apt-get install python-pip -y

# BLAZINGDB-PROTOCOL
RUN ssh-agent bash -c 'ssh-add /root/.ssh/id_rsa; git clone git@github.com:BlazingDB/blazingdb-protocol.git'
WORKDIR /opt/blazingdb-protocol
RUN git checkout develop
WORKDIR /opt/blazingdb-protocol/java
RUN mvn clean install
#BLAZINGDB-PROTOCOL: Python
WORKDIR /opt/blazingdb-protocol/python
RUN pip install
RUN python3 setup.py install --user


# BLAZINGDB-RAL
WORKDIR /opt
RUN ssh-agent bash -c 'ssh-add /root/.ssh/id_rsa; git clone git@github.com:BlazingDB/blazingdb-ral.git'
WORKDIR /opt/blazingdb-ral
RUN git checkout develop

RUN mkdir /opt/blazingdb-ral/build
WORKDIR /opt/blazingdb-ral/build
RUN cmake ..
RUN make -j4


# BLAZINGDB-ORCHESTRATOR
WORKDIR /opt
RUN ssh-agent bash -c 'ssh-add /root/.ssh/id_rsa; git clone git@github.com:BlazingDB/blazingdb-orchestrator.git'
RUN mkdir /opt/blazingdb-orchestrator/build
WORKDIR /opt/blazingdb-orchestrator/build
RUN cmake ..
RUN make -j8

# BLAZINGDB-CALCITE
WORKDIR /opt
RUN ssh-agent bash -c 'ssh-add /root/.ssh/id_rsa; git clone git@github.com:BlazingDB/blazingdb-calcite.git'
RUN mkdir /blazingsql
WORKDIR /opt/blazingdb-calcite
RUN mvn clean install -Dmaven.test.skip=true

RUN mkdir /shared

RUN  cp -r /opt/blazingdb-ral/build/testing-libgdf /shared
RUN  cp -r /opt/blazingdb-orchestrator/build/ /shared
RUN  cp -r /opt/blazingdb-calcite/blazingdb-calcite-application/target/*.jar /shared

VOLUME /shared

ENTRYPOINT  cp -r /opt/blazingdb-ral/build/testing-libgdf /shared ; cp -r /opt/blazingdb-calcite/blazingdb-calcite-application/target/*.jar /shared ; cp -r /opt/blazingdb-orchestrator/build/ /shared


#BEFORE BUILD
#Before this, register your ssh public key into 
#BUILD
#docker build --build-arg SSH_KEY="$(cat ~/.ssh/id_rsa)" --tag blasql .
#RUN CONTAINER: To generate the binaries
#docker run -v /home/edithbz/blazingdb/repos/blazingsql/shared:/shared blasql

