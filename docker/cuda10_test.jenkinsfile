pipeline {
  agent {
      label 'slave-gpu'
  }  
  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    string(name: 'DOCKER_IMAGE', defaultValue: 'blazingdb/blazingsql:colab-cuda10', description: 'The image to run tests e2e')
    string(name: 'E2E_USER', defaultValue: 'mario21ic', description: '')
    string(name: 'E2E_WORKDIR', defaultValue: '/home/mario21ic/blazingsql/workspace', description: '')
    string(name: 'E2E_DATA_SET', defaultValue: 'DataSet1Gb', description: '')
    string(name: 'E2E_BLAZINGDB_TESTING_BRANCH', defaultValue: 'develop', description: 'branch of repo blazingdb-testing')
    string(name: 'SLACK_CHANNEL', defaultValue: 'jenkins-blazingsql', description: '')
  }

  environment {
    CONTAINER_NAME = "blzsql_test_cuda10"
    SLACK_MESSAGE  = " - Job '${env.JOB_NAME}' - Build #${env.BUILD_NUMBER}: ${env.BUILD_URL}"
  }
  
  stages {

    stage("Repository") {
      steps {
        checkout scm
      }
    }

    stage("Config") {
      steps {
        // TODO: compartir volume de workspace
        sh "git clone -b develop git@github.com:BlazingDB/blazingdb-testing.git"
        sh "cd blazingdb-testing/ && git pull origin develop && mkdir -p BlazingSQLTest/logtest/"
        sh "gsutil cp gs://blazingdbstorage/configFileFalse.json blazingdb-testing/BlazingSQLTest/"
        sh "gsutil cp -R gs://blazingdbstorage/DataSet100Mb blazingdb-testing/BlazingSQLTest/"

        sh "docker run --runtime=nvidia --name ${CONTAINER_NAME} -d -ti -v $PWD/docker/colab/install_tests.sh:/tmp/install_tests.sh -v $PWD/docker/colab/run_test.sh:/tmp/run_test.sh -v $PWD/blazingdb-testing/BlazingSQLTest/:/tmp/blazingdb/ ${env.DOCKER_IMAGE} bash"
        sh "docker exec ${CONTAINER_NAME} service supervisor start"
        sh "docker exec ${CONTAINER_NAME} blazingsql status"
      }
    }

    stage("Build") {
      steps {
        sh "docker exec ${CONTAINER_NAME} /tmp/install_tests.sh"
        sh "docker exec -ti -d ${DOCKER_IMAGE} /etc/apache-drill-1.12.0/bin/drill-embedded"
      }
    }

    stage("Test") {
      steps {
        sh "docker exec -ti ${CONTAINER_NAME} /tmp/run_test.sh"
        sh "docker rm -f ${CONTAINER_NAME}"
      }
    }

  }

  // Method to post jenkinsfile
  post {
   // always {
   //    notifySlack "Started"
   //  }
    success {
         notifySlack "Success"
    }
    failure {
          notifySlack "Failure"
    }
    unstable {
          notifySlack "Warning"
    }
  }

}

// Method to send notifications for slack
def notifySlack(String buildStatus = 'Started') {
    buildStatus = buildStatus ?: 'Success'

    def color

    if (buildStatus == 'Started') {
        color = '#6f7275'
    } else if (buildStatus == 'Success') {
        color = '#037c0e'
    } else if (buildStatus == 'Warning') {
        color = '#dfdd30'
    } else {
        color = '#8e0406'
    }


 slackSend channel: "${params.SLACK_CHANNEL}", color: color, failOnError: true, message: "${buildStatus}" + "$SLACK_MESSAGE"
}
