pipeline {
  agent {
    label 'slave-gpu'
  }
  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 2, unit: 'HOURS')
  }

  parameters {
    booleanParam(name: 'COMPILE', defaultValue: true, description: 'Compile binaries')
    string(name: 'CREDENTIALS', defaultValue: 'dockerhub-editaxz', description: 'Your credentials on blazingdb docker hub organization')
    booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Publish to Kubernetes cluster')
    string(name: 'K8S_CLUSTER', defaultValue: 'p100-1-2-gpu', description: 'Kubernetes cluster')

    string(name: 'BLAZINGDB_TOOLCHAIN_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'RMM_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'CUSTRINGS_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'CUDF_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_PROTOCOL_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_IO_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_COMMUNICATION_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_RAL_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_ORCHESTRATOR_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_CALCITE_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'PYBLAZING_BRANCH', defaultValue: 'develop', description: '')

    booleanParam(name: 'BLAZINGDB_TOOLCHAIN_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build all dependencies')
    booleanParam(name: 'CUSTRINGS_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'CUDF_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_PROTOCOL_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_IO_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_COMMUNICATION_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_RAL_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_ORCHESTRATOR_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_CALCITE_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'PYBLAZING_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'CLEAN_WORKSPACE_MAVEN', defaultValue: false, description: 'maven-repository')

    string(name: 'SLACK_CHANNEL', defaultValue: 'jenkins-blazingsql', description: '')
  }
  
  environment {
    IMAGE_BUILD = "blazingsql/build:dask"
    IMAGE_SCHEDULER = "blazingdb/blazingsql:dask_calcite_orchestrator_pyblazingv${env.BUILD_NUMBER}"
    IMAGE_WORKER = "blazingdb/blazingsql:dask_ral_pyblazingv${env.BUILD_NUMBER}"
    BZSQL_WORKSPACE = "${env.WORKSPACE}/workspace_dask"
    BZSQL_OUTPUT = "${env.WORKSPACE}/output_dask"
    ARTIFACT = "${env.BZSQL_OUTPUT}/blazingsql-files.tar.gz"
    SLACK_MESSAGE=" - Job '${env.JOB_NAME}' - Build #${env.BUILD_NUMBER}: ${env.BUILD_URL}"
  }

  stages {

    stage("Repository") {
      steps {
        checkout scm
      }
    }

    stage("Build compiler") {
      steps {
        sh "nvidia-docker build -t ${IMAGE_BUILD} ./docker/blazingsql-build/"
      }
    }
    
    stage("Compile Binaries") {
      when {
        expression {
          return params.COMPILE ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
        sh "mkdir -p ${BZSQL_WORKSPACE}"
        sh "mkdir -p ${BZSQL_OUTPUT}"

        sh "./docker/config_write.sh ${params.BLAZINGDB_TOOLCHAIN_BRANCH} ${params.RMM_BRANCH} ${params.CUSTRINGS_BRANCH} ${params.CUDF_BRANCH} ${params.BLAZINGDB_PROTOCOL_BRANCH} ${params.BLAZINGDB_IO_BRANCH} ${params.BLAZINGDB_COMMUNICATION_BRANCH} ${params.BLAZINGDB_RAL_BRANCH} ${params.BLAZINGDB_ORCHESTRATOR_BRANCH} ${params.BLAZINGDB_CALCITE_BRANCH} ${params.PYBLAZING_BRANCH} ${params.BLAZINGDB_TOOLCHAIN_CLEAN_BEFORE_BUILD} ${params.CUSTRINGS_CLEAN_BEFORE_BUILD} ${params.CUDF_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_PROTOCOL_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_IO_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_COMMUNICATION_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_RAL_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_ORCHESTRATOR_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_CALCITE_CLEAN_BEFORE_BUILD} ${params.PYBLAZING_CLEAN_BEFORE_BUILD} ${params.CLEAN_WORKSPACE_MAVEN}"
        sh "cp -f ./blazingsql-build.properties ${BZSQL_WORKSPACE}"

        sh "./docker/compile.sh ${BZSQL_WORKSPACE} ${BZSQL_OUTPUT} ${IMAGE_BUILD}"
      }
    }

    stage("Config Images") {
      steps {
        sh "cp -f ${env.ARTIFACT} ./docker/dask/"

        dir ("./docker/dask/") {
          sh "./docker_build_images.sh"
        }
      }
    }

    stage("Build Images") {
      steps {
        parallel (
          scheduler: {
            sh "docker build -t ${env.IMAGE_SCHEDULER} ./docker/dask/calcite_orchestrator_pyblazing/"
          },
          worker: {
            sh "docker build -t ${env.IMAGE_WORKER} ./docker/dask/ral_pyblazing/"
          }
        )
      }
    }

    stage("Docker Login") {
      steps {
        withCredentials([usernamePassword(credentialsId: "${params.CREDENTIALS}", passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
          sh "echo $PASSWORD | docker login -u $USERNAME --password-stdin"
        }
      }
    }

    stage("Docker Hub") {
      steps {
        parallel (
          scheduler: {
            sh "docker push ${env.IMAGE_SCHEDULER}"
          },
          worker: {
            sh "docker push ${env.IMAGE_WORKER}"
          }
        )
      }
    }

    stage("Docker Logout") {
      steps {
        sh "docker logout"
      }
    }

    stage("Deploy K8s") {
      when {
        expression {
          return params.DEPLOY ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
        sh "gcloud container clusters get-credentials ${params.K8S_CLUSTER} --zone us-west1-a --project blazingdb-system-automation"

        sh "kubectl --record deployment/blazingdb-dask-scheduler-dep set image blazingdb-dask-scheduler=${env.IMAGE_SCHEDULER}"
        sh "kubectl --record deployment/blazingdb-dask-worker-dep set image blazingdb-dask-worker=${env.IMAGE_WORKER}"
      }
    }
  }

// Method to post jenkinsfile
  post {
    //always {
      //notifySlack "Started"
      //archiveArtifacts artifacts: "${ARTIFACT}", onlyIfSuccessful: true
      //sh "rm -f ${ARTIFACT}"
    //}
    success {
         notifySlack "Success"
    }
    failure {
          notifySlack "Failure"
    }
    unstable {
          notifySlack "Warning"
    }
  }

}

// Method to send notifications for slack
def notifySlack(String buildStatus = 'Started') {
    buildStatus = buildStatus ?: 'Success'

    def color

    if (buildStatus == 'Started') {
        color = '#6f7275'
    } else if (buildStatus == 'Success') {
        color = '#037c0e'
    } else if (buildStatus == 'Warning') {
        color = '#dfdd30'
    } else {
        color = '#8e0406'
    }


 slackSend channel: "${params.SLACK_CHANNEL}", color: color, failOnError: true, message: "${buildStatus}" + "$SLACK_MESSAGE"
}
