pipeline {
  agent {
      label 'slave-gpu'
  }

environment {
    //ARTIFACTOR = "${env.BUILD_NUMBER}.zip"
    SLACK_MESSAGE=" - Job '${env.JOB_NAME}' - Build #${env.BUILD_NUMBER}: ${env.BUILD_URL}"     
  }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    string(name: 'CREDENTIALS', defaultValue: 'dockerhub-editaxz', description: 'Your credentials on blazingdb docker hub organization')
    string(name: 'IMAGE', defaultValue: 'blazingsql/deploy:5', description: 'change the default value to: blazingdb/blazingsql:tag')
    booleanParam(name: 'DOCKERHUB_LATEST', defaultValue: false, description: 'Publish image as latest')
    string(name: 'SLACK_CHANNEL', defaultValue: 'devops-test', description: '')
  }

  stages {
    stage("Repository") {
      steps {
        checkout scm
      }
    }

    stage("Publish on docker hub") { 
      steps {
        script {
          docker.withRegistry('https://registry.hub.docker.com', "${params.CREDENTIALS}") {
            //sh "docker push ${params.IMAGE}"
            app = docker.image("${params.IMAGE}")
            app.push()
          }
        }
      }
    }

    stage("Publish as latest") {
      when {
        expression {
          return params.DOCKERHUB_LATEST ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
        script {
          docker.withRegistry('https://registry.hub.docker.com', "${params.CREDENTIALS}") {
            //sh "docker tag ${params.IMAGE} blazingdb/blazingsql:latest"
            //sh "docker push blazingdb/blazingsql:latest"
            app = docker.image("${params.IMAGE}")
            app.push("latest")
          }
        }
      }
    }
  }
}

// Post method to slack notifications
post {
   // always {
   //    notifySlack "Started"
   //  }
    success {
         notifySlack "Success"
    }
    failure {
          notifySlack "Failure"
    }
    unstable {
          notifySlack "Warning"
    }
  }
} 

// Define method to validate build status 
def notifySlack(String buildStatus = 'Started') {
    buildStatus = buildStatus ?: 'Success'

    def color

    if (buildStatus == 'Started') {
        color = '#6f7275'
    } else if (buildStatus == 'Success') {
        color = '#037c0e'
    } else if (buildStatus == 'Warning') {
        color = '#dfdd30'
    } else {
        color = '#8e0406'
    }


 slackSend channel: "${params.SLACK_CHANNEL}", color: color, failOnError: true, message: "${buildStatus}" + "$SLACK_MESSAGE"
}
