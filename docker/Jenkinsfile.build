pipeline {
  agent {
      label 'slave-gpu'
  }  
  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    booleanParam(name: 'CALL_JOB_E2E', defaultValue: true, description: 'Call to job e2e')
    booleanParam(name: 'DOCKERHUB_PUBLISH', defaultValue: false, description: 'Publish to Docker Hub')
    booleanParam(name: 'DOCKERHUB_LATEST', defaultValue: false, description: 'Publish image as latest')
    string(name: 'DOCKERHUB_TAG_DEPLOY', defaultValue: 'latest', description: "NOTE: Write your deploy tag, if leave in blank it'll be the automatic")
    booleanParam(name: 'ANACONDA_PUBLISH_CLOUD', defaultValue: false, description: 'Publish to Conda Cloud')
    string(name: 'ANACONDA_BLAZINGSQL_VERSION', defaultValue: '0.2.0', description: 'Blazingsql version')   
    string(name: 'ANACONDA_PYTHON_VERSION', defaultValue: 'py35', description: 'Python version')   
    string(name: 'ANACONDA_LABEL', defaultValue: 'main', description: 'Label to blazinsql package')   
    string(name: 'BLAZINGDB_TOOLCHAIN_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'CUSTRINGS_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'CUDF_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_PROTOCOL_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_IO_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_COMMUNICATION_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_RAL_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_ORCHESTRATOR_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'BLAZINGDB_CALCITE_BRANCH', defaultValue: 'develop', description: 'if the branch is a feature use put into quotation marks and backslash before / ')
    string(name: 'PYBLAZING_BRANCH', defaultValue: 'develop', description: '')
    string(name: 'SLACK_CHANNEL', defaultValue: 'jenkins-blazingsql', description: '')
    string(name: 'BRANCH_BLAZINGDB_AUTOMATION', defaultValue: 'develop', description: '')
    booleanParam(name: 'BLAZINGDB_TOOLCHAIN_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build all dependencies')
    booleanParam(name: 'CUSTRINGS_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'CUDF_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_PROTOCOL_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_IO_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_COMMUNICATION_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_RAL_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_ORCHESTRATOR_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'BLAZINGDB_CALCITE_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'PYBLAZING_CLEAN_BEFORE_BUILD', defaultValue: false, description: 'Clean before build ')
    booleanParam(name: 'CLEAN_WORKSPACE_MAVEN', defaultValue: false, description: 'maven-repository')
  }
  
  environment {
    IMAGE = "blazingdb/blazingsql:${params.DOCKERHUB_TAG_DEPLOY}"
    SLACK_MESSAGE=" - Job '${env.JOB_NAME}' - Build #${env.BUILD_NUMBER}: ${env.BUILD_URL}"
  }

  stages {

    stage("Repository") {
      steps {
        checkout scm
      }
    }
    
    stage("Build") {
      steps {
        dir("docker/") {
          sh "./build-deploy.sh ${params.DOCKERHUB_TAG_DEPLOY} ${params.BLAZINGDB_TOOLCHAIN_BRANCH} ${params.CUSTRINGS_BRANCH} ${params.CUDF_BRANCH} ${params.BLAZINGDB_PROTOCOL_BRANCH} ${params.BLAZINGDB_IO_BRANCH} ${params.BLAZINGDB_COMMUNICATION_BRANCH} ${params.BLAZINGDB_RAL_BRANCH} ${params.BLAZINGDB_ORCHESTRATOR_BRANCH} ${params.BLAZINGDB_CALCITE_BRANCH} ${params.PYBLAZING_BRANCH} ${params.BLAZINGDB_TOOLCHAIN_CLEAN_BEFORE_BUILD} ${params.CUSTRINGS_CLEAN_BEFORE_BUILD} ${params.CUDF_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_PROTOCOL_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_IO_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_COMMUNICATION_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_RAL_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_ORCHESTRATOR_CLEAN_BEFORE_BUILD} ${params.BLAZINGDB_CALCITE_CLEAN_BEFORE_BUILD} ${params.PYBLAZING_CLEAN_BEFORE_BUILD} ${params.CLEAN_WORKSPACE_MAVEN}"
        }
      }
    }

    stage("Test") {
      steps {
        dir("docker/") {
          sh "./test-image.sh ${env.IMAGE}"
        }
      }
    }

    stage("Run") {
      steps {
        dir("docker/") {
          sh "./run-deploy.sh ${params.DOCKERHUB_TAG_DEPLOY}"
        }
      }
    }

    stage("Call Job E2E") {
      when {
        expression {
          return params.CALL_JOB_E2E ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
        build job: "04.ENDTOEND_TEST_BLAZINGSQL", parameters: [
          [$class: 'StringParameterValue', name: 'CALL_JOB_BUILD', value: "false"],
          [$class: 'StringParameterValue', name: 'DOCKER_IMAGE_BASE', value: "${env.IMAGE}"],
          [$class: 'StringParameterValue', name: 'BRANCH_BLAZINGDB_AUTOMATION', value: "${params.BRANCH_BLAZINGDB_AUTOMATION}"]
        ]
      }
    }
    
    stage("Publish to Docker Hub") {
      when {
        expression {
          return params.DOCKERHUB_PUBLISH ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
        build job: "02.PUBLISH_BLAZINGSQL_DOCKERHUB", parameters: [
          [$class: 'StringParameterValue', name: 'IMAGE', value: "${env.IMAGE}"],
          [$class: 'StringParameterValue', name: 'DOCKERHUB_LATEST', value: "${params.DOCKERHUB_LATEST}"],
          
        ]
      }     
    }

    stage("Publish to Anaconda Cloud") {
      when {
        expression {
          return params.ANACONDA_PUBLISH_CLOUD ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }      
      steps {
        build job: "03.PUBLISH_BLAZINGSQL_ANACONDACLOUD", parameters: [
          [$class: 'StringParameterValue', name: 'ANACONDA_BLAZINGSQL_VERSION', value: "${params.ANACONDA_BLAZINGSQL_VERSION}"],
          [$class: 'StringParameterValue', name: 'ANACONDA_PYTHON_VERSION', value: "${params.ANACONDA_PYTHON_VERSION}"],
          [$class: 'StringParameterValue', name: 'ANACONDA_LABEL', value: "${params.ANACONDA_LABEL}"],
           [$class: 'StringParameterValue', name: 'ANACONDA_PUBLISH_CLOUD', value: "${params.ANACONDA_PUBLISH_CLOUD}"],
        ]
      }
    }
  }

// Method to post jenkinsfile
  post {
   // always {
   //    notifySlack "Started"
   //  }
    success {
         notifySlack "Success"
    }
    failure {
          notifySlack "Failure"
    }
    unstable {
          notifySlack "Warning"
    }
  }

}

// Method to send notifications for slack
def notifySlack(String buildStatus = 'Started') {
    buildStatus = buildStatus ?: 'Success'

    def color

    if (buildStatus == 'Started') {
        color = '#6f7275'
    } else if (buildStatus == 'Success') {
        color = '#037c0e'
    } else if (buildStatus == 'Warning') {
        color = '#dfdd30'
    } else {
        color = '#8e0406'
    }


 slackSend channel: "${params.SLACK_CHANNEL}", color: color, failOnError: true, message: "${buildStatus}" + "$SLACK_MESSAGE"
}
